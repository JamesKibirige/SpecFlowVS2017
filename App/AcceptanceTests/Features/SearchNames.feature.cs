// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SearchNamesFeature : Xunit.IClassFixture<SearchNamesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SearchNames.feature"
#line hidden
        
        public SearchNamesFeature(SearchNamesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SearchNames", "\t\t\tUsers can search for names in the System via the Search page", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Navigate to Bantu-Names website")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchNames")]
        [Xunit.TraitAttribute("Description", "Navigate to Bantu-Names website")]
        public virtual void NavigateToBantu_NamesWebsite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Navigate to Bantu-Names website", "Given\t\t\r\nWhen\t\tUser Navigates to Bantu-Names website Url: https://bantunames.azur" +
                    "ewebsites.net/\r\nThen\t\tUser Is sent to Search page by default", ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Navigate to Search Page")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchNames")]
        [Xunit.TraitAttribute("Description", "Navigate to Search Page")]
        public virtual void NavigateToSearchPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Navigate to Search Page", "Given\t\tThat I am on the Bantu-Names website\r\nWhen\t\tUser Navigates to Search page\r" +
                    "\nThen\t\tSearch page visible in initial state no name in search box and no search " +
                    "results.", ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Search for existing Name")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchNames")]
        [Xunit.TraitAttribute("Description", "Search for existing Name")]
        public virtual void SearchForExistingName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for existing Name", "Given\t\tThat I am on the Bantu-Names website\r\nAnd\t\t\tThat I am on the Search page\r\n" +
                    "And\t\t\tThe name \'Musisi\' exists\r\nWhen\t\tUser searches for  \'Musisi\'\r\nThen\t\tSearch " +
                    "results returned for \'Musisi\'", ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Search for non-existant Name")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchNames")]
        [Xunit.TraitAttribute("Description", "Search for non-existant Name")]
        public virtual void SearchForNon_ExistantName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for non-existant Name", "Given\t\tThat I am on the Bantu-Names website\r\nAnd\t\t\tThat I am on the Search page\r\n" +
                    "And\t\t\tThe name \'Jack\' doesn\'t exist\r\nWhen\t\tUser searches for  \'Jack\'\r\nThen\t\tNo s" +
                    "earch results returned for \'Jack\'", ((string[])(null)));
#line 21
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use valid search term when searching Names")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchNames")]
        [Xunit.TraitAttribute("Description", "Use valid search term when searching Names")]
        public virtual void UseValidSearchTermWhenSearchingNames()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use valid search term when searching Names", "Given\t\tThat I am on the Bantu-Names website\r\nAnd\t\t\tThat I am on the Search page\r\n" +
                    "And\t\t\tThe name \'Buwembo\' is valid search term\r\nWhen\t\tUser searches for  \'Buwembo" +
                    "\'\r\nThen\t\tNo Validation message displayed for \'Buwembo\'", ((string[])(null)));
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use invalid search-term when searching Names")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchNames")]
        [Xunit.TraitAttribute("Description", "Use invalid search-term when searching Names")]
        public virtual void UseInvalidSearch_TermWhenSearchingNames()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use invalid search-term when searching Names", "Given\t\tThat I am on the Bantu-Names website\r\nAnd\t\t\tThat I am on the Search page\r\n" +
                    "And\t\t\tThe name \'1James\' is invalid search term\r\nWhen\t\tUser searches for  \'1James" +
                    "\'\r\nThen\t\tValidation message displayed for \'1James\'", ((string[])(null)));
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SearchNamesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SearchNamesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

